# -*- coding: utf-8 -*-
#+OPTIONS: H:2 num:t \n:nil @:t ::t |:t ^:{} f:t *:t TeX:t LaTeX:t skip:nil p:nil

* The endpoints for a minimal server with url handlers
** Start server
   #+BEGIN_SRC sh 
     cd ~/local/ghes-mirva-server
     go build && ./ghes-mirva-server --verbosity debug start
   #+END_SRC

** Start in vs code debugger via launch.json
    Matching the command
    #+BEGIN_SRC sh 
      ./ghes-mirva-server --verbosity debug start
    #+END_SRC

    #+begin_src javascript
      {
          "version": "0.2.0",
          "configurations": [
              {
                  "name": "Launch Package",
                  "type": "go",
                  "request": "launch",
                  "mode": "auto",
                  "program": "${workspaceFolder}",
                  "buildFlags": [],
                  "args": [
                      "--verbosity", "debug",
                      "start"
                  ]
              }
          ]
      }
    #+end_src


** DONE Request: mrva submit
   #+BEGIN_SRC sh 
     curl http://localhost:8080/repos/hohn/mirva-controller/code-scanning/codeql/variant-analyses -d '{}'
     # 2024/02/28 09:26:24 INFO New mrva run  owner=hohn repo=mirva-controller
     # 2024/02/28 09:26:24 ERROR MRVA submission body querypack has invalid format
   #+END_SRC

** DONE request: mrva status
   CLOSED: [2024-02-16 Fri 13:28]
   - State "DONE"       from "NEXT"       [2024-02-16 Fri 13:28]
   [[file:~/local/gh-mrva/log-status-60.log::Check the status]]
   #+BEGIN_SRC sh 
     curl -d '{}' http://localhost:8080/repos/hohn/mirva-controller/code-scanning/codeql/variant-analyses/9057

     # log
     # 2024/02/15 10:13:31 mrva status request for (hohn,mirva-controller,9057)
   #+END_SRC
   This is the standalone status request.  

   It's also the first request made when downloading; the difference is on the
   client side's handling of the data.

** DONE Request: mrva download part 1
   [[file:~/local/gh-mrva/log-download-60.log::Download the sarif files and CodeQL dbs when finished]]
   1. [ ] GET
      : /repositories/:repository_id/code-scanning/codeql/variant-analyses/:codeql_variant_analysis_id

   2. [X] GET
      : /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}

   #+BEGIN_SRC sh 
     curl -d '{}'   \
         http://localhost:8080/repos/hohn/mirva-controller/code-scanning/codeql/variant-analyses/8809

     # log
     # 2024/02/15 10:14:13 mrva status request for (hohn,mirva-controller,8809)
   #+END_SRC

** DONE Request: mrva download part 2
   [[file:~/local/gh-mrva/log-download-60.log::2024/02/14 10:24:59 >> GET https://api.github.com/repos/google/flatbuffers/code-scanning/codeql/databases/cpp]]
   Getting repo task summary / analysis results (this is the same endpoint):
   1. [ ] GET
      : /repositories/{repository_id}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repositories/{variant_analysis_repo_id}

   2. [X] GET
      : /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}

   #+BEGIN_SRC sh 
     curl -d '{}'   \
         http://localhost:8080/repos/hohn/mirva-controller/code-scanning/codeql/variant-analyses/8809/repos/google/flatbuffers

     # log
     # 2024/02/14 19:20:05 mrva download step 2 for (hohn,mirva-controller,8809,google,flatbuffers)
   #+END_SRC

** DONE Request: mrva download part 3
   [[file:~/local/gh-mrva/log-download-60.log::https://objects-origin.githubusercontent.com/codeql-query-console/codeql-variant-analysis-repo-tasks]]

   Download from storage, info from [[*Request: mrva download part 2][Request: mrva download part 2]]

    #+BEGIN_SRC sh 
     curl -d {} \
         https://objects-origin.githubusercontent.com/codeql-query-console/codeql-variant-analysis-repo-tasks/8809/...
    #+END_SRC
   The =artifact_url= from step 2 is used and should be opaque here.  However, our
   server will also respond to storage retrieval requests just so we have a
   complete interface.

   A (modified) url handler with all necessary arguments is at 
   : /codeql-query-console/codeql-variant-analysis-repo-tasks/{codeql_variant_analysis_id}/{repo_id}/{owner_id}/{controller_repo_id}

   #+BEGIN_SRC sh 
     curl -d {} \
         http://localhost:8080/codeql-query-console/codeql-variant-analysis-repo-tasks/8809/19953044/2253228/747492529

     # log
     # 2024/02/14 19:24:12 mrva download step 3 for (8809,19953044,2253228,747492529)
   #+END_SRC

** DONE Request: mrva download part 4
   [[file:~/local/gh-mrva/log-download-60.log::https://queryconsoleprod.blob.core.windows.net]]
   Download from storage, info from [[*Request: mrva download part 2][Request: mrva download part 2]]

   #+BEGIN_SRC sh 
     curl -d {} \
          https://queryconsoleprod.blob.core.windows.net/github-codeql-query-console-prod/codeql-variant-analysis-repo-tasks/8809/...
   #+END_SRC

   Again, the =artifact_url= from step 2 is used and should be opaque here.
   However, our server will also respond to storage retrieval requests just so we
   have a complete interface.

   A (modified) url handler with all necessary arguments is at 
   : /github-codeql-query-console-prod/codeql-variant-analysis-repo-tasks/{codeql_variant_analysis_id}/{repo_id}

   #+BEGIN_SRC sh 
     curl -d {} \
         http://localhost:8080/github-codeql-query-console-prod/codeql-variant-analysis-repo-tasks/8809/19953044

     # log
     # 2024/02/14 19:28:26 mrva download step 4 for (8809,19953044)
   #+END_SRC

* Initial MRVA emulation
  Emulating the full MRVA workflow can be done via separate services to truly
  isolate their functionality, but strict interface separation within one go
  process is sufficient for development and testing.  Using goroutines to
  handle parallelism and external processes to use multiple cores to do the
  work will provide the same behaviour as truly separate machines, but
  without the overhead -- no network protocols, no separate services.
** ONGOING mrva submit activity
   [[file:~/local/gh-mrva/log-submit-71.log]]

   The original
   - uploads instructions for action with DB storage paths
   - runs workflow
     The workflow handles /all/ repositories.

   Code additions in [[file:~/local/ghes-mirva-server/cmd/start.go]]

   Here is the data to handle; some of it will only be passed through for compatibility

   - [X] POST request, Data from the URL:
     : /repos/hohn   /mirva-controller/code-scanning/codeql/variant-analyses
     : /repos/{owner}/{repo}          /code-scanning/codeql/variant-analyses
     In
     : MirvaRequest(w http.ResponseWriter, r *http.Request) 

   - [X] POST request, data from the payload:
     #+BEGIN_SRC text
       2024/02/21 11:55:37 >> request body: {
       2024/02/21 11:55:37     "action_repo_ref": "main"
       2024/02/21 11:55:37     "language": "cpp"
       2024/02/21 11:55:37     "repositories": [
           "google/flatbuffers",
           "psycopg/psycopg2"
       ]
       2024/02/21 11:55:37     "query_pack": 
       2024/02/21 11:55:37         base64 encoded gzipped tar file, contents: {
       ...
       }
     #+END_SRC

   - [X] Directory structure
     
   - [ ] Internal processing follows from the request payload, response body, and
     status request information

   - [X] POST request reponse body in full; much of this response will not be used
     further, so we provide dummy values for those entries.

     # [[file:~/local/gh-mrva/log-submit-60.log::2024/02/14 10:20:15 >> response body: {]]
     #+BEGIN_SRC javascript
       // 2024/02/14 10:20:15 >> response body:
       {
           // The variant_analysis_id
           "id": 9057,
           "controller_repo": {
               "id": 1,
               "node_id": "",
               "name": "mirva-controller",
               "full_name": "hohn/mirva-controller",
               "private": false,
               "owner": {},
               "html_url": "",
               "description": "Controller for MRVA",
               "fork": false,
               "url": "",
               "forks_url": "",
               "keys_url": "",
               "collaborators_url": "",
               "teams_url": "",
               "hooks_url": "",
               "issue_events_url": "",
               "events_url": "",
               "assignees_url": "",
               "branches_url": "",
               "tags_url": "",
               "blobs_url": "",
               "git_tags_url": "",
               "git_refs_url": "",
               "trees_url": "",
               "statuses_url": "",
               "languages_url": "",
               "stargazers_url": "",
               "contributors_url": "",
               "subscribers_url": "",
               "subscription_url": "",
               "commits_url": "",
               "git_commits_url": "",
               "comments_url": "",
               "issue_comment_url": "",
               "contents_url": "",
               "compare_url": "",
               "merges_url": "",
               "archive_url": "",
               "downloads_url": "",
               "issues_url": "",
               "pulls_url": "",
               "milestones_url": "",
               "notifications_url": "",
               "labels_url": "",
               "releases_url": "",
               "deployments_url": ""
           },

           "actor": {
               "login": "hohn",
               "id": 2253228,
               "node_id": "...",
               "avatar_url": "...",
               "gravatar_id": "...",
               "url": "...",
               "html_url": "https://github.com/hohn",
               "followers_url": "...",
               "following_url": "...",
               "gists_url": "...",
               "starred_url": "...",
               "subscriptions_url": "...",
               "organizations_url": "...",
               "repos_url": "...",
               "events_url": "...",
               "received_events_url": "...",
               "type": "...",
               "site_admin": true
           },
           // language for the query
           "query_language": "cpp",
           // server url for query pack download including variant_analysis_id
           "query_pack_url": "https://objects-origin.githubusercontent.com/codeql-query-console/variant_analyses/9165/query_pack..."
           // time.Now().UnixNano() or so
           "created_at": "2024-02-14T18:20:18Z",
           "updated_at": "2024-02-14T18:20:19Z",
           // The status
           "status": "in_progress",
           // The mismatches
           "skipped_repositories": {
               "access_mismatch_repos": {
                   "repository_count": 0,
                   "repositories": []
               },
               "not_found_repos": {
                   "repository_count": 0,
                   "repository_full_names": []
               },
               "no_codeql_db_repos": {
                   "repository_count": 0,
                   "repositories": []
               },
               "over_limit_repos": {
                   "repository_count": 0,
                   "repositories": []
               }
           }
       }
     #+END_SRC

** NEXT mrva request testing via client
   The gh-mrva client uses gh.RESTClient(), so URL overrides are there.

   Pre-canned requests from =curl= may be easier for testing, but the payload is a
   query pack.

** TODO mrva status activity
   [[file:~/local/gh-mrva/log-status-60.log::Check the status]]
   - POST request, Data from the URL
   - POST request, data from the payload
   - Internal processing follows from the request payload, response body, and
     [[*mrva submit activity][mrva submit activity]]
   - POST request reponse body in full; much of this response will not be used
     further, so we provide dummy values for those entries.

** TODO mrva download activity
   - POST request, Data from the URL
   - POST request, data from the payload
   - Internal processing follows from the request payload, response body, and
     the [[*mrva status activity][mrva status activity]] and [[*mrva submit activity][mrva submit activity]]
   - POST request reponse body in full; much of this response will not be used
     further, so we provide dummy values for those entries.

* TODO Include Context in request propagation
   https://pkg.go.dev/context#Context
